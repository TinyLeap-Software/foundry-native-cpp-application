
plugins {
    id 'cpp-application'
    id 'cpp-unit-test'
    id 'xcode'
    id 'visual-studio'
}

repositories {
    // Foundry native repository for dependencies.
    maven {
        url = "https://tinyleap.io/foundry/repository/libs-release/"
    }
}

application {

    //Build flavours
    buildTypes {
        debug
        release
    }

    //Target machines for your project.
    targetMachines = [
            //currently has limited support for Windows.
            machines.windows.x86_64,
            machines.macOS.x86_64,
            machines.linux.x86_64
    ]

    privateHeaders.from {
        // -I directories
        files('src/main/cpp')
        //Add multiple directories like such.
        //files('src/main/cpp','src/main/cpp/base','src/main/cpp/utils')
    }

    dependencies {
        //Dependencies for your application
        //see https://tinyleap.io/foundry/#browse/browse:libs-release:io%2Ftinyleap%2Fnative for the catalog.
        // Using SQLite for this sample.
        implementation('io.tinyleap.native:sqlite:3.31.1')
        //####  if you want to statically link this dependency use ###
        // implementation('io.tinyleap.native:sqlite:3.31.1'){
        //    attributes { attribute(Attribute.of("org.gradle.native.linkage", Linkage), Linkage.STATIC) }
        // }
    }

    binaries.configureEach {
        println "Building for Platform " + org.gradle.internal.os.OperatingSystem.current()
        def compileTask = compileTask.get()
        def linkTask = linkTask.get()
        // ## https://en.wikipedia.org/wiki/Position-independent_code
        compileTask.positionIndependentCode = "true"

        if(compileTask.isOptimized()){
            // ## Release Build
            compileTask.debuggable = "false"
            // ## turn on optimizations
            compileTask.compilerArgs.addAll(['-O3'])
        }else{
            // ## Debug Build
            compileTask.debuggable = "true"
            compileTask.macros.put("DEBUG","1")
            // ## Turn off compiler optimizations
            compileTask.compilerArgs.addAll(['-O0'])
        }

        // C++ Language 17 standard
        compileTask.compilerArgs.addAll(['-std=c++17'])
        // ## if .cc  extension is used, change it here.
        compileTask.source.from fileTree(dir: "src/main/c", include: "**/*.cpp")


        //OS specific MACROS, compiler args or linker args
        if(org.gradle.internal.os.OperatingSystem.current()==org.gradle.internal.os.OperatingSystem.MAC_OS){
            // compileTask.macros.put("MAC_OS_MACRO","1")
            // ## Macro with no value
            // compileTask.macros.put("NO_VAL_MACRO","")
        }else if(org.gradle.internal.os.OperatingSystem.current()==org.gradle.internal.os.OperatingSystem.LINUX){
            // ## add linker arguments
            //linkTask.linkerArgs.addAll(['-lpthread','-ldl'])
        }else if(org.gradle.internal.os.OperatingSystem.current()==org.gradle.internal.os.OperatingSystem.WINDOWS){

        }
    }
}

//Unit Testing Support
unitTest {
    targetMachines = [
            machines.windows.x86_64,
            machines.macOS.x86_64,
            machines.linux.x86_64
    ]
    dependencies {
        //use google
        implementation('io.tinyleap.native:googletest:1.10.0')
                                //OR
        // implementation('io.tinyleap.native:cppunit:1.15.1')
    }
    binaries.configureEach {
        println "Building for Platform " + org.gradle.internal.os.OperatingSystem.current()

        def compileTask = compileTask.get()
        compileTask.source.from fileTree(dir: "src/test/cpp", include: "**/*.cpp")
        compileTask.compilerArgs.addAll(['-std=c++17'])
    }

}



